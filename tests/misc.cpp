#include <test.hpp>

static constexpr unsigned long long BITSTREAM_BYTE_COUNT { 1000LLU };                 // in bytes
static constexpr unsigned long long BITSTREAM_BIT_COUNT { BITSTREAM_BYTE_COUNT * 8 }; // in bits

static constexpr unsigned char const bitstream[BITSTREAM_BYTE_COUNT] = {
    0b00110110, 0b10011110, 0b11101111, 0b10010011, 0b01110100, 0b10100011, 0b01001011, 0b00110110, 0b00110010, 0b01000100, 0b01111101,
    0b11011011, 0b11100001, 0b00111010, 0b11011100, 0b11000010, 0b11101011, 0b00101010, 0b11011011, 0b11111100, 0b01000001, 0b10110010,
    0b10000110, 0b00000100, 0b01011101, 0b01100100, 0b11010100, 0b01000101, 0b10110110, 0b01111100, 0b00100011, 0b11110011, 0b10000011,
    0b00010011, 0b11111110, 0b11110001, 0b10111100, 0b01000101, 0b11111100, 0b10100110, 0b00110010, 0b01011100, 0b11010011, 0b10101100,
    0b01010101, 0b00000110, 0b00110001, 0b00001100, 0b11000011, 0b00111111, 0b01011001, 0b01010110, 0b00110001, 0b00110101, 0b00111110,
    0b10011101, 0b01101001, 0b10101011, 0b11110000, 0b10000110, 0b01001010, 0b00110101, 0b11110110, 0b01010100, 0b11001110, 0b11100101,
    0b00110011, 0b10110111, 0b11110100, 0b11001110, 0b00111000, 0b10100101, 0b00100110, 0b00011001, 0b10101001, 0b10010010, 0b10011111,
    0b00001100, 0b10001111, 0b11100011, 0b01010101, 0b00010000, 0b11110001, 0b11010100, 0b10011111, 0b10010001, 0b00000010, 0b11000010,
    0b11101010, 0b01000011, 0b10101101, 0b00001110, 0b10111010, 0b01100110, 0b01111111, 0b11010000, 0b01110001, 0b00011111, 0b10100000,
    0b00101010, 0b10000011, 0b01000101, 0b11000101, 0b01010001, 0b11001110, 0b10000000, 0b01011011, 0b00000011, 0b00100101, 0b10011011,
    0b11010000, 0b11001101, 0b00011000, 0b01011001, 0b01111001, 0b10110001, 0b00000011, 0b01110100, 0b01011011, 0b00001010, 0b00001010,
    0b00010010, 0b00101101, 0b10100111, 0b10000000, 0b10111100, 0b00011111, 0b01010000, 0b10110001, 0b11001011, 0b01111010, 0b00101110,
    0b10101000, 0b00100010, 0b00001010, 0b11000000, 0b01010011, 0b10100010, 0b01000101, 0b10110101, 0b00111111, 0b01101111, 0b11011111,
    0b00111001, 0b11001001, 0b11111001, 0b00001000, 0b01100111, 0b00110100, 0b10110101, 0b11101111, 0b00110101, 0b10100100, 0b11011011,
    0b00111111, 0b11010101, 0b01011010, 0b10011001, 0b11100100, 0b00110111, 0b10000110, 0b01100000, 0b00111110, 0b00101100, 0b11001000,
    0b11111100, 0b00000100, 0b00100110, 0b01010111, 0b11000001, 0b10001010, 0b01111000, 0b01100111, 0b01000111, 0b00101000, 0b10100011,
    0b01111011, 0b11000001, 0b01101001, 0b00001010, 0b00111001, 0b00011010, 0b11100100, 0b10011001, 0b01001011, 0b10100101, 0b11110000,
    0b01000011, 0b11000000, 0b11000111, 0b01100000, 0b01000111, 0b10010000, 0b11101101, 0b10010110, 0b00000111, 0b10011001, 0b01111010,
    0b11100001, 0b00110111, 0b11011000, 0b01100010, 0b11000010, 0b01000101, 0b01001110, 0b00010111, 0b00000010, 0b01101111, 0b11001001,
    0b00011111, 0b10100100, 0b00101111, 0b01011111, 0b00111101, 0b00101101, 0b11101010, 0b10100011, 0b01110011, 0b10111011, 0b01100111,
    0b01001111, 0b01010110, 0b10111010, 0b00000101, 0b00101001, 0b01010011, 0b01010110, 0b01100100, 0b11100001, 0b00001000, 0b11101010,
    0b10110000, 0b10001101, 0b01111000, 0b01100111, 0b11000001, 0b01100100, 0b11110101, 0b01110010, 0b10110011, 0b00010010, 0b00111000,
    0b00101101, 0b11100001, 0b00010111, 0b00110101, 0b01100111, 0b11011111, 0b00001001, 0b00011110, 0b01001101, 0b01011010, 0b01000011,
    0b10111100, 0b01010001, 0b10010110, 0b11001101, 0b10111110, 0b01010011, 0b00001101, 0b01101001, 0b10110010, 0b10110011, 0b01000010,
    0b11000011, 0b01000100, 0b00100101, 0b11011011, 0b00000100, 0b11001110, 0b00010111, 0b10101101, 0b01001000, 0b10111100, 0b10111110,
    0b10100101, 0b01101000, 0b00010101, 0b11101101, 0b11110011, 0b11011100, 0b11001110, 0b01100001, 0b01010011, 0b01100001, 0b10010011,
    0b01101111, 0b10000010, 0b10001111, 0b11110111, 0b11011011, 0b01000100, 0b00111010, 0b00011111, 0b10010110, 0b10110011, 0b00000010,
    0b00011001, 0b10001110, 0b00011101, 0b10110001, 0b10100001, 0b11111010, 0b01000001, 0b01101111, 0b01101010, 0b10110001, 0b10100101,
    0b01011101, 0b01111111, 0b11101001, 0b11001101, 0b01100110, 0b11011001, 0b00001000, 0b00100010, 0b01100100, 0b11101011, 0b00001011,
    0b01000101, 0b10011010, 0b01101101, 0b01100010, 0b11100001, 0b10101010, 0b11101011, 0b11101010, 0b00110100, 0b10100000, 0b01000110,
    0b10101001, 0b00011110, 0b10010010, 0b00010101, 0b11001101, 0b01010110, 0b10101001, 0b10111000, 0b10101011, 0b10011110, 0b10101000,
    0b01100011, 0b11100110, 0b10101110, 0b01100010, 0b11011010, 0b11100010, 0b11101001, 0b10111000, 0b11011011, 0b11001010, 0b10110001,
    0b00101111, 0b10010001, 0b01110011, 0b00011110, 0b11010011, 0b00010110, 0b11011100, 0b01110000, 0b11100100, 0b01011010, 0b10011100,
    0b00101010, 0b00011010, 0b10000001, 0b10110101, 0b00100011, 0b00011101, 0b10010101, 0b01001111, 0b10100111, 0b10111111, 0b11011110,
    0b10000010, 0b11111100, 0b10111100, 0b01110001, 0b11101001, 0b11110010, 0b01101101, 0b01111111, 0b11011010, 0b00111110, 0b01011001,
    0b00010101, 0b00110001, 0b10000001, 0b11001111, 0b01011101, 0b11111000, 0b00001111, 0b00001000, 0b11001011, 0b00100101, 0b10000110,
    0b11101010, 0b01110100, 0b11111101, 0b10010101, 0b10110000, 0b01010100, 0b11001001, 0b10110101, 0b00111000, 0b10111010, 0b11010111,
    0b10001001, 0b00111110, 0b11010110, 0b01011011, 0b00000011, 0b11110010, 0b10001001, 0b01100100, 0b10001011, 0b11111100, 0b00101001,
    0b00010000, 0b10010010, 0b10000010, 0b10100011, 0b01101100, 0b01101111, 0b00110001, 0b00011111, 0b11100010, 0b11100101, 0b01110001,
    0b11000111, 0b11010101, 0b01101100, 0b11000101, 0b00111000, 0b11101110, 0b11100001, 0b00010110, 0b01111101, 0b10111110, 0b01110101,
    0b01101010, 0b00100110, 0b00001000, 0b11110010, 0b11000110, 0b11001110, 0b00010101, 0b00111001, 0b00101111, 0b00011111, 0b11110111,
    0b00101101, 0b10100000, 0b11101000, 0b00110000, 0b10100000, 0b11011010, 0b10011001, 0b11110110, 0b11100010, 0b01100101, 0b00010100,
    0b10001100, 0b01011100, 0b00101111, 0b11010111, 0b10100101, 0b10100010, 0b01101100, 0b00101110, 0b10000010, 0b00010101, 0b01010011,
    0b01011100, 0b11011010, 0b11100110, 0b01001001, 0b00101101, 0b10110101, 0b01111101, 0b00101111, 0b11100000, 0b00100101, 0b11110010,
    0b10000011, 0b10011010, 0b00010010, 0b00111110, 0b01101101, 0b00011001, 0b00000111, 0b01110110, 0b11001100, 0b10111110, 0b10111000,
    0b01000101, 0b00010001, 0b10001101, 0b11010101, 0b11100101, 0b10011111, 0b10010000, 0b10001011, 0b10011000, 0b01101111, 0b01000111,
    0b00101001, 0b10101000, 0b01011100, 0b01000101, 0b00001110, 0b11000101, 0b01110100, 0b01110101, 0b10101101, 0b00100101, 0b00110101,
    0b10100001, 0b10000010, 0b00111000, 0b10000000, 0b10010101, 0b10001101, 0b00111101, 0b11110010, 0b01011100, 0b11110110, 0b00111101,
    0b11100100, 0b01111111, 0b01100010, 0b10101010, 0b10111111, 0b00111100, 0b10011110, 0b11100000, 0b01100010, 0b11000000, 0b11011101,
    0b10000110, 0b00011110, 0b11011100, 0b11000100, 0b10010011, 0b01101000, 0b01111001, 0b01110101, 0b10101110, 0b10010101, 0b01011011,
    0b11101000, 0b11111110, 0b11001001, 0b01101001, 0b10001110, 0b00110010, 0b01110100, 0b01011011, 0b11101100, 0b00101001, 0b11100011,
    0b00000011, 0b10000100, 0b10111101, 0b10001100, 0b11000001, 0b01111010, 0b10100100, 0b11111000, 0b00111110, 0b11010101, 0b00110101,
    0b11101010, 0b01010101, 0b00011000, 0b00110100, 0b10001111, 0b10000111, 0b11001011, 0b01001110, 0b01011110, 0b10010010, 0b01011000,
    0b00010001, 0b10001011, 0b01001111, 0b01101110, 0b00010100, 0b00101111, 0b10100000, 0b11101000, 0b01100101, 0b11110010, 0b10010100,
    0b01001110, 0b01010000, 0b01001011, 0b00100000, 0b01011110, 0b11000101, 0b01011001, 0b01100101, 0b00011010, 0b10011001, 0b01011100,
    0b11010101, 0b10010010, 0b11000111, 0b11111110, 0b01111101, 0b10000110, 0b00110100, 0b00001011, 0b01111001, 0b00011100, 0b00111011,
    0b01101101, 0b01011000, 0b01001100, 0b10001010, 0b00010110, 0b10010111, 0b11101011, 0b00001100, 0b00101101, 0b10001001, 0b01010101,
    0b00101101, 0b11000000, 0b01101111, 0b10101001, 0b00001010, 0b10000001, 0b11101000, 0b01100101, 0b10111010, 0b01010011, 0b00101001,
    0b11100111, 0b00010100, 0b10100010, 0b01010010, 0b10110101, 0b11000010, 0b10010011, 0b10110000, 0b11011101, 0b11101001, 0b10001011,
    0b01001110, 0b10001011, 0b10100001, 0b10101000, 0b00001101, 0b00100011, 0b00100111, 0b10111111, 0b01000100, 0b01111010, 0b10000111,
    0b11111101, 0b01001111, 0b00101000, 0b10100010, 0b01111001, 0b10101110, 0b10000100, 0b10001010, 0b00001011, 0b00111011, 0b11000101,
    0b10010000, 0b00001110, 0b01011011, 0b11111011, 0b11111001, 0b10000001, 0b11011101, 0b00110110, 0b01100111, 0b00011001, 0b01100100,
    0b11010101, 0b00011001, 0b01110011, 0b11110101, 0b11100101, 0b00010110, 0b11111100, 0b11111011, 0b01011011, 0b10011001, 0b00101101,
    0b10110001, 0b00000101, 0b01000011, 0b11111100, 0b11011000, 0b01001111, 0b00011000, 0b01011111, 0b11010111, 0b11100111, 0b01001011,
    0b11010000, 0b00100110, 0b10100010, 0b00101101, 0b01101001, 0b10101100, 0b10100100, 0b11001101, 0b11011100, 0b01110000, 0b00001011,
    0b00111111, 0b10001100, 0b11100001, 0b01110110, 0b11000101, 0b01010000, 0b00011011, 0b11010111, 0b00110000, 0b11110111, 0b10001110,
    0b01000100, 0b00000111, 0b00111000, 0b00011010, 0b10100001, 0b10101100, 0b00001010, 0b10011111, 0b00000111, 0b10110110, 0b01011011,
    0b00111011, 0b11001001, 0b11110100, 0b10010101, 0b00000101, 0b10001101, 0b01011010, 0b11010111, 0b01110011, 0b11101001, 0b00011110,
    0b11101000, 0b10001011, 0b10010101, 0b01001111, 0b10001110, 0b00101101, 0b00100010, 0b01001011, 0b11001101, 0b11001011, 0b01110001,
    0b00010001, 0b01010110, 0b01100001, 0b11001101, 0b01101010, 0b10000000, 0b11011111, 0b00010101, 0b11001001, 0b11011111, 0b01001011,
    0b10100110, 0b01111100, 0b11010010, 0b11100100, 0b10101100, 0b01001101, 0b01110010, 0b01100011, 0b10000001, 0b01000001, 0b11100100,
    0b01111100, 0b11010101, 0b11100100, 0b01111111, 0b10101010, 0b10100010, 0b11000010, 0b00000100, 0b10110011, 0b01001000, 0b01110110,
    0b01001010, 0b10110010, 0b00011001, 0b10101110, 0b01100110, 0b01110010, 0b01111010, 0b00101000, 0b11101010, 0b01011110, 0b10011111,
    0b10101010, 0b11100110, 0b00010101, 0b01010100, 0b00011001, 0b11001110, 0b10100010, 0b00010101, 0b01001000, 0b10000011, 0b01111100,
    0b11000100, 0b00101111, 0b01111011, 0b10111111, 0b11011100, 0b11110100, 0b01111100, 0b01101101, 0b10010100, 0b01101000, 0b00100110,
    0b10110110, 0b11101110, 0b00010001, 0b10001100, 0b11011111, 0b00001010, 0b10010000, 0b00100111, 0b11000110, 0b00101000, 0b11010101,
    0b11001111, 0b10110011, 0b10101101, 0b01110001, 0b01001001, 0b10011101, 0b11000100, 0b11100100, 0b00010111, 0b11000100, 0b00100001,
    0b10111110, 0b01100011, 0b00000110, 0b00110110, 0b01101001, 0b01111100, 0b01010111, 0b11100111, 0b10000110, 0b11111010, 0b01010001,
    0b01000000, 0b01110010, 0b01111010, 0b00100011, 0b11000011, 0b01010101, 0b11011001, 0b01000111, 0b11010100, 0b10111010, 0b00101010,
    0b01111100, 0b10110100, 0b11011101, 0b10110000, 0b11110111, 0b11000100, 0b11010010, 0b00111111, 0b11100100, 0b11010001, 0b00010001,
    0b00101111, 0b10111010, 0b10100000, 0b00110001, 0b11110010, 0b01000011, 0b11101011, 0b10111101, 0b10111101, 0b01101100, 0b01100001,
    0b11101010, 0b11100001, 0b11011001, 0b10001100, 0b00010011, 0b11100010, 0b01110000, 0b00110111, 0b00111000, 0b11110101, 0b01100101,
    0b00111110, 0b01001000, 0b11100110, 0b00101011, 0b10001110, 0b10101011, 0b01111010, 0b01100100, 0b10011011, 0b00101000, 0b00001110,
    0b10110111, 0b00101000, 0b01010111, 0b11100111, 0b10010010, 0b11011110, 0b00100010, 0b00010100, 0b10110001, 0b00011001, 0b00000111,
    0b10101001, 0b00000111, 0b00010011, 0b00111001, 0b01100010, 0b10011101, 0b00011001, 0b10010010, 0b10101001, 0b11110000, 0b10001001,
    0b01001101, 0b01011111, 0b10111100, 0b11111001, 0b11011000, 0b11101000, 0b11100010, 0b00111110, 0b10001000, 0b00011101, 0b01111000,
    0b00000011, 0b01100100, 0b01011100, 0b11111101, 0b10101011, 0b11011111, 0b01101110, 0b00010101, 0b11100001, 0b11100011, 0b11011001,
    0b00010000, 0b11010110, 0b01101000, 0b00111100, 0b00100001, 0b00100100, 0b11011010, 0b10000001, 0b10000110, 0b11000101, 0b11111000,
    0b01111011, 0b00001011, 0b00110100, 0b01000100, 0b01001010, 0b01010111, 0b10110000, 0b11110011, 0b10010110, 0b10000100, 0b10001111,
    0b11110101, 0b11110101, 0b01010001, 0b01100001, 0b00010100, 0b11110111, 0b10010011, 0b00100010, 0b01110111, 0b01001100, 0b10101010,
    0b00011000, 0b01110101, 0b01000110, 0b00010100, 0b01110011, 0b11001001, 0b01010010, 0b10001001, 0b11011010, 0b00000010
};

static constexpr char binstr[BITSTREAM_BIT_COUNT + 1 /* + 1 for the NULL terminator */] = // string representation of bitstream
    "00110110100111101110111110010011011101001010001101001011001101100011001001000100011111011101101111100001001110101101110011000010111010"
    "11001010101101101111111100010000011011001010000110000001000101110101100100110101000100010110110110011111000010001111110011100000110001"
    "00111111111011110001101111000100010111111100101001100011001001011100110100111010110001010101000001100011000100001100110000110011111101"
    "01100101010110001100010011010100111110100111010110100110101011111100001000011001001010001101011111011001010100110011101110010100110011"
    "10110111111101001100111000111000101001010010011000011001101010011001001010011111000011001000111111100011010101010001000011110001110101"
    "00100111111001000100000010110000101110101001000011101011010000111010111010011001100111111111010000011100010001111110100000001010101000"
    "00110100010111000101010100011100111010000000010110110000001100100101100110111101000011001101000110000101100101111001101100010000001101"
    "11010001011011000010100000101000010010001011011010011110000000101111000001111101010000101100011100101101111010001011101010100000100010"
    "00001010110000000101001110100010010001011011010100111111011011111101111100111001110010011111100100001000011001110011010010110101111011"
    "11001101011010010011011011001111111101010101011010100110011110010000110111100001100110000000111110001011001100100011111100000001000010"
    "01100101011111000001100010100111100001100111010001110010100010100011011110111100000101101001000010100011100100011010111001001001100101"
    "00101110100101111100000100001111000000110001110110000001000111100100001110110110010110000001111001100101111010111000010011011111011000"
    "01100010110000100100010101001110000101110000001001101111110010010001111110100100001011110101111100111101001011011110101010100011011100"
    "11101110110110011101001111010101101011101000000101001010010101001101010110011001001110000100001000111010101011000010001101011110000110"
    "01111100000101100100111101010111001010110011000100100011100000101101111000010001011100110101011001111101111100001001000111100100110101"
    "01101001000011101111000101000110010110110011011011111001010011000011010110100110110010101100110100001011000011010001000010010111011011"
    "00000100110011100001011110101101010010001011110010111110101001010110100000010101111011011111001111011100110011100110000101010011011000"
    "01100100110110111110000010100011111111011111011011010001000011101000011111100101101011001100000010000110011000111000011101101100011010"
    "00011111101001000001011011110110101010110001101001010101110101111111111010011100110101100110110110010000100000100010011001001110101100"
    "00101101000101100110100110110101100010111000011010101011101011111010100011010010100000010001101010100100011110100100100001010111001101"
    "01010110101010011011100010101011100111101010100001100011111001101010111001100010110110101110001011101001101110001101101111001010101100"
    "01001011111001000101110011000111101101001100010110110111000111000011100100010110101001110000101010000110101000000110110101001000110001"
    "11011001010101001111101001111011111111011110100000101111110010111100011100011110100111110010011011010111111111011010001111100101100100"
    "01010100110001100000011100111101011101111110000000111100001000110010110010010110000110111010100111010011111101100101011011000001010100"
    "11001001101101010011100010111010110101111000100100111110110101100101101100000011111100101000100101100100100010111111110000101001000100"
    "00100100101000001010100011011011000110111100110001000111111110001011100101011100011100011111010101011011001100010100111000111011101110"
    "00010001011001111101101111100111010101101010001001100000100011110010110001101100111000010101001110010010111100011111111101110010110110"
    "10000011101000001100001010000011011010100110011111011011100010011001010001010010001100010111000010111111010111101001011010001001101100"
    "00101110100000100001010101010011010111001101101011100110010010010010110110110101011111010010111111100000001001011111001010000011100110"
    "10000100100011111001101101000110010000011101110110110011001011111010111000010001010001000110001101110101011110010110011111100100001000"
    "10111001100001101111010001110010100110101000010111000100010100001110110001010111010001110101101011010010010100110101101000011000001000"
    "11100010000000100101011000110100111101111100100101110011110110001111011110010001111111011000101010101010111111001111001001111011100000"
    "01100010110000001101110110000110000111101101110011000100100100110110100001111001011101011010111010010101010110111110100011111110110010"
    "01011010011000111000110010011101000101101111101100001010011110001100000011100001001011110110001100110000010111101010100100111110000011"
    "11101101010100110101111010100101010100011000001101001000111110000111110010110100111001011110100100100101100000010001100010110100111101"
    "10111000010100001011111010000011101000011001011111001010010100010011100101000001001011001000000101111011000101010110010110010100011010"
    "10011001010111001101010110010010110001111111111001111101100001100011010000001011011110010001110000111011011011010101100001001100100010"
    "10000101101001011111101011000011000010110110001001010101010010110111000000011011111010100100001010100000011110100001100101101110100101"
    "00110010100111100111000101001010001001010010101101011100001010010011101100001101110111101001100010110100111010001011101000011010100000"
    "00110100100011001001111011111101000100011110101000011111111101010011110010100010100010011110011010111010000100100010100000101100111011"
    "11000101100100000000111001011011111110111111100110000001110111010011011001100111000110010110010011010101000110010111001111110101111001"
    "01000101101111110011111011010110111001100100101101101100010000010101000011111111001101100001001111000110000101111111010111111001110100"
    "10111101000000100110101000100010110101101001101011001010010011001101110111000111000000001011001111111000110011100001011101101100010101"
    "01000000011011110101110011000011110111100011100100010000000111001110000001101010100001101011000000101010011111000001111011011001011011"
    "00111011110010011111010010010101000001011000110101011010110101110111001111101001000111101110100010001011100101010100111110001110001011"
    "01001000100100101111001101110010110111000100010001010101100110000111001101011010101000000011011111000101011100100111011111010010111010"
    "01100111110011010010111001001010110001001101011100100110001110000001010000011110010001111100110101011110010001111111101010101010001011"
    "00001000000100101100110100100001110110010010101011001000011001101011100110011001110010011110100010100011101010010111101001111110101010"
    "11100110000101010101010000011001110011101010001000010101010010001000001101111100110001000010111101111011101111111101110011110100011111"
    "00011011011001010001101000001001101011011011101110000100011000110011011111000010101001000000100111110001100010100011010101110011111011"
    "00111010110101110001010010011001110111000100111001000001011111000100001000011011111001100011000001100011011001101001011111000101011111"
    "10011110000110111110100101000101000000011100100111101000100011110000110101010111011001010001111101010010111010001010100111110010110100"
    "11011101101100001111011111000100110100100011111111100100110100010001000100101111101110101010000000110001111100100100001111101011101111"
    "01101111010110110001100001111010101110000111011001100011000001001111100010011100000011011100111000111101010110010100111110010010001110"
    "01100010101110001110101010110111101001100100100110110010100000001110101101110010100001010111111001111001001011011110001000100001010010"
    "11000100011001000001111010100100000111000100110011100101100010100111010001100110010010101010011111000010001001010011010101111110111100"
    "11111001110110001110100011100010001111101000100000011101011110000000001101100100010111001111110110101011110111110110111000010101111000"
    "01111000111101100100010000110101100110100000111100001000010010010011011010100000011000011011000101111110000111101100001011001101000100"
    "01000100101001010111101100001111001110010110100001001000111111110101111101010101000101100001000101001111011110010011001000100111011101"
    "0011001010101000011000011101010100011000010100011100111100100101010010100010011101101000000010";

static unsigned char mutablestream[BITSTREAM_BYTE_COUNT]          = { 0 }; // writable buffer for testing

static constexpr unsigned char xorbitstream[BITSTREAM_BYTE_COUNT] = {
    0b10111010, 0b01011100, 0b11101101, 0b00100001, 0b11000111, 0b00011000, 0b10000010, 0b10101010, 0b10100101, 0b10011110, 0b11110101,
    0b00110000, 0b10110101, 0b00111101, 0b11001101, 0b00101000, 0b11010101, 0b10111101, 0b11010101, 0b11101001, 0b10010101, 0b00010000,
    0b11001101, 0b01101011, 0b10001001, 0b11111100, 0b11100000, 0b01010111, 0b00001111, 0b01101101, 0b00001011, 0b10010000, 0b01111000,
    0b11110111, 0b10111001, 0b00100000, 0b01101001, 0b00100010, 0b00110100, 0b11011010, 0b10110110, 0b10111111, 0b11100001, 0b00011000,
    0b00111000, 0b01000100, 0b01000010, 0b10001000, 0b11110010, 0b00000111, 0b11111100, 0b00001011, 0b10010101, 0b00000110, 0b11100001,
    0b10011011, 0b01011100, 0b10010110, 0b01101110, 0b01110101, 0b01000111, 0b11111011, 0b01111011, 0b01101101, 0b11001010, 0b01000011,
    0b01100001, 0b11010011, 0b00011100, 0b11101001, 0b01001001, 0b01101100, 0b11110001, 0b10101000, 0b01101010, 0b00001101, 0b10010000,
    0b00001001, 0b11110101, 0b01000010, 0b01010110, 0b11011111, 0b00000101, 0b01000100, 0b01011111, 0b00011111, 0b00111000, 0b10000011,
    0b01000111, 0b10011111, 0b11111010, 0b01011010, 0b10010010, 0b01111011, 0b10111101, 0b00100001, 0b11010001, 0b10010110, 0b10101111,
    0b00101100, 0b00000110, 0b10110011, 0b00010010, 0b11101011, 0b01111001, 0b01111000, 0b10100100, 0b00011000, 0b00100001, 0b00011011,
    0b10101100, 0b10110101, 0b00110110, 0b11110000, 0b00100011, 0b00100010, 0b10100001, 0b01101011, 0b00101010, 0b11011110, 0b10011011,
    0b01001001, 0b11111011, 0b10001001, 0b00001100, 0b10110101, 0b01111110, 0b01000001, 0b11101100, 0b11011001, 0b00110011, 0b00100100,
    0b11111001, 0b00000101, 0b10011000, 0b11000111, 0b00100100, 0b10001110, 0b11100100, 0b01001011, 0b11101101, 0b00000011, 0b00110111,
    0b01110110, 0b00111101, 0b10111011, 0b11110000, 0b00001100, 0b11000010, 0b10010100, 0b00111100, 0b10011001, 0b00111100, 0b11110011,
    0b10010011, 0b11000100, 0b01101101, 0b11100000, 0b01011110, 0b00001101, 0b01010001, 0b00011011, 0b00101110, 0b00011011, 0b11100010,
    0b01001000, 0b10110001, 0b00110001, 0b11110101, 0b10001000, 0b10000000, 0b10111001, 0b01001001, 0b11001011, 0b00011100, 0b11110011,
    0b11010101, 0b01101101, 0b00111010, 0b00101110, 0b00110100, 0b10001000, 0b10001110, 0b00001000, 0b11001011, 0b10001010, 0b01010011,
    0b11101000, 0b00000001, 0b01001110, 0b10010111, 0b10000100, 0b00110100, 0b00111011, 0b01101011, 0b01000010, 0b11001111, 0b11001100,
    0b00100110, 0b10010010, 0b00101101, 0b01110011, 0b00011100, 0b10001111, 0b01101010, 0b10101001, 0b00010101, 0b11101101, 0b01100110,
    0b01010110, 0b00000011, 0b11111001, 0b11001000, 0b10001101, 0b00111010, 0b00000010, 0b00110100, 0b11010101, 0b10101100, 0b10000110,
    0b01110000, 0b10001111, 0b10101101, 0b11100011, 0b01100101, 0b01010000, 0b01101001, 0b11010101, 0b10111001, 0b11011101, 0b11110001,
    0b11000101, 0b11110001, 0b01100111, 0b01110111, 0b01000000, 0b00001011, 0b01111111, 0b00011001, 0b00011100, 0b01001110, 0b00100111,
    0b10101110, 0b11010110, 0b10011011, 0b01110010, 0b00001000, 0b00011100, 0b00000100, 0b01000110, 0b00011100, 0b10001111, 0b10100001,
    0b10000110, 0b01000110, 0b00000100, 0b10110110, 0b00110011, 0b00010000, 0b11011100, 0b01011110, 0b00001000, 0b01001110, 0b01010110,
    0b00011100, 0b11010110, 0b10101101, 0b00000100, 0b11100010, 0b11101110, 0b10101110, 0b01000101, 0b00011110, 0b00111010, 0b11100100,
    0b01111001, 0b10101011, 0b10110111, 0b00010101, 0b01000110, 0b00010000, 0b11111101, 0b00111110, 0b11000110, 0b01011110, 0b01111101,
    0b11111000, 0b10100001, 0b10011100, 0b10000011, 0b01001010, 0b00101000, 0b01000010, 0b01010010, 0b01010100, 0b00110001, 0b01100111,
    0b01001100, 0b10000110, 0b10100011, 0b11001001, 0b00101001, 0b00111001, 0b01110110, 0b00001001, 0b11001101, 0b10011111, 0b00110101,
    0b11110011, 0b11010000, 0b10100011, 0b10110001, 0b11000010, 0b11000010, 0b01001111, 0b11010110, 0b11101111, 0b01110001, 0b01111010,
    0b10111111, 0b01010101, 0b01110001, 0b01110111, 0b11110110, 0b10010110, 0b10000111, 0b11111001, 0b11110110, 0b01010001, 0b10010000,
    0b11111011, 0b01110001, 0b10110011, 0b10110010, 0b10001010, 0b11110011, 0b00001010, 0b01110011, 0b00011001, 0b10000000, 0b11011001,
    0b10110010, 0b00000110, 0b11000010, 0b11001110, 0b11010010, 0b10010000, 0b00110011, 0b00111111, 0b10110110, 0b10011110, 0b11010011,
    0b11000110, 0b10001100, 0b01010111, 0b11101000, 0b10001101, 0b11101000, 0b00101011, 0b10100011, 0b00111001, 0b01110010, 0b10011100,
    0b01000001, 0b00000001, 0b11110110, 0b10100000, 0b01000100, 0b11011100, 0b01001100, 0b11010100, 0b10111011, 0b10110110, 0b10111000,
    0b01100110, 0b10000110, 0b00011111, 0b00100110, 0b11110010, 0b10101011, 0b00101101, 0b11111100, 0b00011000, 0b00010010, 0b00000010,
    0b01101101, 0b10100110, 0b00100011, 0b11000011, 0b10110101, 0b00110000, 0b10100000, 0b01111001, 0b00110010, 0b01011010, 0b00010110,
    0b11110100, 0b01110101, 0b00100001, 0b11011011, 0b01001011, 0b10100110, 0b11101110, 0b10101111, 0b01110000, 0b11011011, 0b11101011,
    0b11111110, 0b01001100, 0b00110101, 0b11111011, 0b11001011, 0b10001000, 0b11010000, 0b01110000, 0b11010011, 0b10101110, 0b11001001,
    0b11011010, 0b01101110, 0b00101011, 0b01001100, 0b11101100, 0b11001011, 0b11011001, 0b00101010, 0b00001011, 0b11100111, 0b00100100,
    0b00000011, 0b01000001, 0b01101010, 0b00001011, 0b10111001, 0b01000001, 0b11110000, 0b10010101, 0b01111101, 0b10101010, 0b11110001,
    0b00101010, 0b00101000, 0b11011000, 0b10100100, 0b10111010, 0b00101111, 0b00010100, 0b10001010, 0b10000110, 0b10101100, 0b00011010,
    0b11100000, 0b00100011, 0b11101001, 0b01011011, 0b00001100, 0b00000001, 0b10001101, 0b00100100, 0b01101001, 0b00010010, 0b10011100,
    0b11010011, 0b00101001, 0b01011010, 0b01110011, 0b11010110, 0b10110001, 0b11010100, 0b01010001, 0b11011000, 0b10000101, 0b10110100,
    0b11011000, 0b11010001, 0b01110110, 0b11111010, 0b10111001, 0b00011111, 0b10000011, 0b11110010, 0b01000111, 0b01011010, 0b01101111,
    0b01101000, 0b01110100, 0b00001011, 0b00100001, 0b00100110, 0b00000010, 0b01110001, 0b11101101, 0b00001000, 0b10000000, 0b10010110,
    0b11000001, 0b11000110, 0b10111111, 0b00100100, 0b00100110, 0b10101100, 0b11100110, 0b11100000, 0b10000110, 0b00101001, 0b11111011,
    0b00000111, 0b01011111, 0b10011111, 0b01000100, 0b11100101, 0b00001110, 0b10011010, 0b10011100, 0b11010010, 0b00101100, 0b10000000,
    0b11011011, 0b00011011, 0b00011100, 0b10111001, 0b00011000, 0b10001100, 0b00111011, 0b00100101, 0b10100110, 0b10111100, 0b11110000,
    0b00111011, 0b10001101, 0b00110010, 0b10011101, 0b11100110, 0b11110000, 0b00001100, 0b00110100, 0b00100111, 0b00100010, 0b10011111,
    0b10010010, 0b11101010, 0b01110010, 0b01100001, 0b11001110, 0b11001100, 0b10000100, 0b00001000, 0b01010001, 0b11000111, 0b11001010,
    0b11000100, 0b11001000, 0b11101100, 0b10110011, 0b11010001, 0b11010010, 0b01101101, 0b01100101, 0b11010110, 0b11110011, 0b11010110,
    0b10001110, 0b10010111, 0b01110000, 0b11100100, 0b10111101, 0b10001010, 0b10001111, 0b11101010, 0b10110111, 0b10000100, 0b11101110,
    0b01111110, 0b01111111, 0b01010010, 0b10011101, 0b10111101, 0b00110001, 0b11001101, 0b11011101, 0b01110010, 0b00110110, 0b10011000,
    0b00000110, 0b01101110, 0b10001000, 0b11001011, 0b10110000, 0b01001010, 0b11000111, 0b01011100, 0b11011010, 0b00100010, 0b10101001,
    0b10001000, 0b00110110, 0b01111010, 0b00010110, 0b11000010, 0b10010110, 0b11111001, 0b10010010, 0b00110011, 0b10010011, 0b10001010,
    0b00101101, 0b01001101, 0b01011101, 0b00100000, 0b00110111, 0b00111010, 0b01010110, 0b10001010, 0b01001110, 0b00111101, 0b01101011,
    0b00101101, 0b11110111, 0b10011011, 0b01111010, 0b01110000, 0b00010110, 0b00010001, 0b11110000, 0b00100011, 0b00111101, 0b11001101,
    0b01001110, 0b10111011, 0b10000100, 0b00010101, 0b01110010, 0b10110110, 0b10100010, 0b01000010, 0b10111110, 0b00011000, 0b01010010,
    0b11100011, 0b01101011, 0b00010110, 0b11010011, 0b01110010, 0b01011000, 0b01101000, 0b00111111, 0b01110000, 0b00000100, 0b01111101,
    0b01011010, 0b01000111, 0b11010010, 0b01100111, 0b11011100, 0b10100110, 0b01011111, 0b10000011, 0b00010000, 0b11100100, 0b11101110,
    0b00101010, 0b11100110, 0b00001011, 0b01010111, 0b01111011, 0b01010100, 0b01000001, 0b11011111, 0b10010010, 0b11010101, 0b11010010,
    0b10001011, 0b10111101, 0b10011010, 0b11110010, 0b10111000, 0b10100001, 0b10010001, 0b11010000, 0b10000101, 0b01000110, 0b11111000,
    0b01011110, 0b10001100, 0b00011010, 0b01010110, 0b10101100, 0b01110101, 0b00111110, 0b11001100, 0b11001111, 0b00110111, 0b01110010,
    0b11000011, 0b00011101, 0b11101001, 0b10101100, 0b11001111, 0b01111100, 0b01011110, 0b00011001, 0b01101010, 0b11101101, 0b01000010,
    0b10100100, 0b11010110, 0b10110010, 0b01110011, 0b10000001, 0b10001101, 0b00100011, 0b11000110, 0b01001001, 0b10110100, 0b10010111,
    0b11011011, 0b10010110, 0b10010010, 0b10110111, 0b00010011, 0b01011110, 0b10110111, 0b01100001, 0b01001111, 0b01001011, 0b00111101,
    0b00001100, 0b11110010, 0b11110000, 0b10111010, 0b10001101, 0b00011101, 0b10011001, 0b00000000, 0b01100100, 0b10001000, 0b00100110,
    0b11010101, 0b00001011, 0b11101000, 0b10100001, 0b11110010, 0b00000111, 0b10011011, 0b11000100, 0b10011011, 0b10100011, 0b10001100,
    0b10010011, 0b00001110, 0b00000100, 0b10010100, 0b11110000, 0b11010101, 0b11110101, 0b11000001, 0b11111100, 0b11110000, 0b00001110,
    0b01110111, 0b11010101, 0b10111111, 0b10100011, 0b11011011, 0b10100011, 0b01110100, 0b01101110, 0b11010101, 0b11101110, 0b00011101,
    0b00000000, 0b10110111, 0b01001111, 0b00110111, 0b10111010, 0b10110011, 0b00011001, 0b01110101, 0b10100011, 0b11001111, 0b00110001,
    0b00101000, 0b00001110, 0b10010011, 0b00101111, 0b01000010, 0b00100111, 0b10110110, 0b10111101, 0b10111001, 0b00000001, 0b11001110,
    0b01000011, 0b01011101, 0b11010000, 0b00001101, 0b11011111, 0b11110011, 0b00000101, 0b10110101, 0b00100000, 0b00001000, 0b10110000,
    0b01110101, 0b10011100, 0b00011010, 0b01100010, 0b11111010, 0b10010100, 0b00101000, 0b00101000, 0b10111010, 0b11100110, 0b11010101,
    0b11000010, 0b10011100, 0b11100010, 0b00000001, 0b01110001, 0b11101001, 0b01011111, 0b01110011, 0b01000001, 0b11111001, 0b10111001,
    0b11111101, 0b00101101, 0b00010011, 0b11101111, 0b11000111, 0b11101010, 0b01001000, 0b11101101, 0b00010011, 0b10000011, 0b11110101,
    0b10011010, 0b11100010, 0b11100101, 0b01011111, 0b10101100, 0b11000101, 0b01111101, 0b00101100, 0b10001010, 0b10100110, 0b10000101,
    0b11011010, 0b11010011, 0b01011101, 0b10000111, 0b10110111, 0b01110011, 0b00100011, 0b00001111, 0b10101110, 0b11100000, 0b11001010,
    0b00111000, 0b10010110, 0b01111110, 0b10101011, 0b00100100, 0b10111101, 0b01010111, 0b01001100, 0b10000001, 0b01000110, 0b01110101,
    0b11100100, 0b10000001, 0b11011110, 0b01100100, 0b00100110, 0b10001100, 0b11001000, 0b01100011, 0b01110000, 0b00010010, 0b11011100,
    0b00011001, 0b10101010, 0b10010110, 0b10010100, 0b01011101, 0b10101111, 0b01000010, 0b01100100, 0b00011000, 0b00011111, 0b10011110,
    0b00110010, 0b01110000, 0b00100000, 0b00000001, 0b01010100, 0b11100001, 0b00110100, 0b10101110, 0b11011110, 0b00110011, 0b10000010,
    0b10101001, 0b11110011, 0b00011011, 0b11101000, 0b01100100, 0b10010011, 0b10001110, 0b10100100, 0b10101010, 0b11001001, 0b01000100,
    0b00011010, 0b11100010, 0b01010000, 0b01110001, 0b01111101, 0b10111101, 0b10001110, 0b11100110, 0b01010000, 0b01101010, 0b00101111,
    0b11110100, 0b00010001, 0b00101011, 0b11101100, 0b11111110, 0b00110011, 0b01110100, 0b11100101, 0b11010011, 0b11011100, 0b01101100,
    0b11010011, 0b00001100, 0b01011010, 0b11001000, 0b01011010, 0b10101010, 0b11000000, 0b01111111, 0b11000101, 0b00010100, 0b00100000,
    0b11001011, 0b01001100, 0b10000111, 0b10010010, 0b00000100, 0b00010010, 0b00001001, 0b10000000, 0b00110111, 0b00100011, 0b01000100,
    0b01100110, 0b00101110, 0b11001011, 0b11010101, 0b11010101, 0b01001001, 0b11100011, 0b10001001, 0b00000011, 0b11111000, 0b00011111,
    0b10111011, 0b10001101, 0b11010101, 0b01100000, 0b00100111, 0b11101001, 0b10011101, 0b00001010, 0b01011000, 0b00000100, 0b11010111,
    0b10100010, 0b11101111, 0b10010111, 0b00100101, 0b10100000, 0b00011100, 0b10010001, 0b00100000, 0b10110010, 0b10111010, 0b00010010,
    0b00101110, 0b01000110, 0b01111110, 0b00110100, 0b00011111, 0b01000010, 0b10011001, 0b01100010, 0b10001101, 0b01101110
};

namespace bitops {

    TEST(BITOPS, GETBIT) {
        for (size_t i = 0; i < BITSTREAM_BIT_COUNT; ++i)
            EXPECT_EQ(huffman::getbit(bitstream, i), (binstr[i] - 48)); // '0' is 48 and '1' is 49
    }

    TEST(BITOPS, SETBIT) {
        for (size_t i = 0; i < BITSTREAM_BIT_COUNT; ++i) huffman::setbit(mutablestream, i, i % 2);
        // set all odd bits true and even bits false, which will effectively make every byte in the stream equivalent to 0b0101'0101
        for (size_t i = 0; i < BITSTREAM_BYTE_COUNT; ++i) EXPECT_EQ(mutablestream[i], 0b0101'0101);
    }

    TEST(BITOPS, XORBIT) {
        ::memset(mutablestream, 0U, BITSTREAM_BYTE_COUNT); // cleanu up after the previous use

        for (size_t i = 0; i < BITSTREAM_BIT_COUNT; ++i) {
            huffman::xorbit(bitstream, xorbitstream, mutablestream, i);
            EXPECT_EQ(huffman::getbit(mutablestream, i), !(huffman::getbit(bitstream, i) == huffman::getbit(xorbitstream, i)));
        }
    }

} // namespace bitops

namespace fileio {

    TEST(FILEIO, OPEN) {
        unsigned long size {};

        const auto* buffer = huffman::___open(LR"(./../media/bronze.jpg)", &size); // an image file
        EXPECT_TRUE(buffer);
        ::free(reinterpret_cast<void*>(const_cast<unsigned char*>(buffer)));
        EXPECT_EQ(size, 589'001LLU);

        buffer = huffman::___open(LR"(./../media/excerpt.txt)",
                                  &size); // a text file
        EXPECT_TRUE(buffer);
        ::free(reinterpret_cast<void*>(const_cast<unsigned char*>(buffer)));
        EXPECT_EQ(size, 999'530LLU);

        buffer = huffman::___open(LR"(./../media/sqlite3.dll)", &size); // a binary file (DLL)
        EXPECT_TRUE(buffer);
        ::free(reinterpret_cast<void*>(const_cast<unsigned char*>(buffer)));
        EXPECT_EQ(size, 1'541'912LLU);
    }

    TEST(FILEIO, WRITE) {
        // TODO
    }

} // namespace fileio

namespace position {

    TEST(POSITION, PARENTPOSITION) {
        EXPECT_EQ(huffman::parent_position(0), 0LLU);
        EXPECT_EQ(huffman::parent_position(1), 0LLU);
        EXPECT_EQ(huffman::parent_position(2), 0LLU);
        EXPECT_EQ(huffman::parent_position(3), 1LLU);
        EXPECT_EQ(huffman::parent_position(4), 1LLU);
        EXPECT_EQ(huffman::parent_position(5), 2LLU);
        EXPECT_EQ(huffman::parent_position(9), 4LLU);
        EXPECT_EQ(huffman::parent_position(13), 6LLU);
        EXPECT_EQ(huffman::parent_position(20), 9LLU);
        EXPECT_EQ(huffman::parent_position(58), 28LLU);
    }

    TEST(POSITION, LEFTCHILDPOSITION) {
        EXPECT_EQ(huffman::lchild_position(0), 1LLU);
        EXPECT_EQ(huffman::lchild_position(1), 3LLU);
        EXPECT_EQ(huffman::lchild_position(2), 5LLU);
        EXPECT_EQ(huffman::lchild_position(3), 7LLU);
        EXPECT_EQ(huffman::lchild_position(4), 9LLU);
        EXPECT_EQ(huffman::lchild_position(5), 11LLU);
        EXPECT_EQ(huffman::lchild_position(9), 19LLU);
        EXPECT_EQ(huffman::lchild_position(13), 27LLU);
        EXPECT_EQ(huffman::lchild_position(20), 41LLU);
        EXPECT_EQ(huffman::lchild_position(58), 117LLU);
    }

    TEST(POSITION, RIGHTCHILDPOSITION) {
        EXPECT_EQ(huffman::rchild_position(0), 2LLU);
        EXPECT_EQ(huffman::rchild_position(1), 4LLU);
        EXPECT_EQ(huffman::rchild_position(2), 6LLU);
        EXPECT_EQ(huffman::rchild_position(3), 8LLU);
        EXPECT_EQ(huffman::rchild_position(4), 10LLU);
        EXPECT_EQ(huffman::rchild_position(5), 12LLU);
        EXPECT_EQ(huffman::rchild_position(9), 20LLU);
        EXPECT_EQ(huffman::rchild_position(13), 28LLU);
        EXPECT_EQ(huffman::rchild_position(20), 42LLU);
        EXPECT_EQ(huffman::rchild_position(58), 118LLU);
    }

} // namespace position
